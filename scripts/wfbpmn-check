#!/usr/bin/env pwsh

$runtlc = { 
    param($a = "", $b = 1)
    java -XX:+UseParallelGC -classpath $env:TLA2TOOLS_HOME/tla2tools.jar tlc2.TLC -deadlock $a -workers $b
}
################

$parse_stat = {
    param($a = "", $b = "", $c = "", $d = @{})
    if ($a -match '(\d*) states generated') {
        $transitions = $matches[1] 
    }
    if ($a -match '(\d*) distinct states found') {
        $states = $matches[1] 
    }
    if ($b -match 'The depth of the complete state graph search is (\d*)') {
        $depth = $matches[1] 
    }
    if ($c -match 'Finished in (.*)s at .*') {
        $time = $matches[1] 
    }
    Write-Host "states=$states trans=$transitions depth=$depth"
    Write-Host "time=$time s"
    $d.Add("states", $states)
    $d.Add("trans", $transitions)
    $d.Add("depth", $depth)
}

function New-Dir {
    param ($fullpath, $model)
    $parent = [System.IO.Path]::GetTempPath() 
    $guid = [guid]::NewGuid()
    $name = $model + "." + (([string]$guid).Replace("-", "")).Substring(0, 5)
    $dir = New-Item -ItemType Directory -Path (Join-Path $parent $name)
    return $dir
} 

function Get-Worker {
    param($a , $b)
    if ($a -eq 2 ) {
        return $b
    }
    else {
        return 1
    }
}

################

if ($args.Length -eq 0 -or $args.Length -gt 2) {
    Write-Host sfbpmn-check '<model>' '[#workers]'
    exit 1
}

$workers = Get-Worker $args.Length $args[1]

if (-NOT (which fbpmn)) {
    Write-Host "fbpmn is not found in the PATH, please install it"
    exit 1
}
if (-NOT (which java)) {
    Write-Host "java is not found in the PATH, please install it"
    exit 1
}

if ($env:FBPMN_HOME.Length -eq 0) {
    Write-Host "env:FBPMN_HOME is not set"; exit 1
}
if (-NOT(Test-Path $env:FBPMN_HOME/theories/tla)) {
    Write-Host "wrong env:FBPMN_HOME (theories/tla not found)"; exit 1
} 
if ($env:TLA2TOOLS_HOME.Length -eq 0 ) {
    Write-Host "TLA2TOOLS_HOME is no set"; exit 1
}
if (-NOT(Test-Path $env:TLA2TOOLS_HOME/tla2tools.jar)) {
    Write-Host "wrong TLA2TOOLS_HOME (tla2tools.jar not found)"; exit 1
} 

$fullpath = $args[0]

if (-NOT(Test-Path $fullpath)) {
    Write-Host "$fullpath not found."
    exit 1
}

$model = (Get-ChildItem $fullpath).Basename
$dir = New-Dir $fullpath $model

# TransfoRemove-Item the BPMN model into TLA
Copy-Item $fullpath $dir
$fullpath = (Get-Item $fullpath).DirectoryName + "/" + (Get-Item $fullpath).BaseName
# Copy user defined files #
if (Test-Path "$fullpath.usernets") { Write-Host "found user networks"; Copy-Item "$fullpath.usernets" $dir; }else { Write-Host "no user networks"; exit 1 ; }
if (Test-Path "$fullpath.userdefs") { Write-Host "found user definitions"; Copy-Item "$fullpath.userdefs" $dir; }else { Write-Host "no user definitions"; }
if (Test-Path "$fullpath.userprops") { Write-Host "found user properties"; Copy-Item "$fullpath.userprops" $dir; }else { Write-Host "no user properties"; exit 1 ; }
if (Test-Path "$fullpath.constraint") { Write-Host "found user constraints"; Copy-Item "$fullpath.constraint" $dir; }else { Write-Host "no user contraints";}

Write-Host "Working in $dir with $workers worker(s)"

Set-Location $dir
fbpmn bpmn2tla $model $model

if (-NOT(Test-Path "$model.tla")) {
    Write-Host "model transfoRemove-Itemation failed"
    exit 1
}

# Copy verification files
Copy-Item (Get-ChildItem $env:FBPMN_HOME/theories/tla -Filter PWS*.tla) $dir -Recurse -Force
Copy-Item (Get-ChildItem $env:FBPMN_HOME/theories/tla -Filter Network*.tla) $dir -Recurse -Force
Copy-Item $env:FBPMN_HOME/theories/tla/UserProperties.tla $dir -Force
Copy-Item $env:FBPMN_HOME/theories/stla/configuration.cfg $dir
Copy-Item $env:FBPMN_HOME/theories/stla/configuration_base.cfg $dir
New-Item -Path "$dir/Configs" -ItemType Directory | Out-Null

# Just copy Config's files from usernets
foreach($item in (Get-Content "$model.usernets")){
    Copy-Item "$env:FBPMN_HOME/theories/tla/Configs/$item.tla" $dir/Configs
}

# First, use StatsBPMN to print some infoRemove-Itemation on the size of the BPMN model.
Copy-Item $env:FBPMN_HOME/theories/tla/StatsBPMN.cfg -Force
(Get-Content $env:FBPMN_HOME/theories/tla/StatsBPMN.tla) -Replace ("INSTANCE.*$", "INSTANCE $model") > StatsBPMN.tla
& $runtlc "$dir/StatsBPMN.tla" | Select-String "Processes=" -NoEmphasis
Remove-Item states -Recurse -Force

$cfg = "configuration.cfg"
$basecfg = "configuration_base.cfg"

# Copy user defined files
if (Test-Path "$model.userdefs" ) { Copy-Item "$model.userdefs" UserProperties.tla; }
if (Test-Path "$model.userprops" ) { Get-Content $basecfg , "$model.userprops" >> "$model.cfg"; }else { Copy-Item $cfg "$model.cfg"; }
if (Test-Path "$model.constraint" ) { Get-Content "$model.constraint" >> "$model.cfg" ; }

# Perform verification
$file_network = Get-ChildItem -Path Configs -Name -Include Network*.tla 
$modele = [ordered]@{} 
$comms = [ordered]@{} 
foreach ($network in $file_network) {
    $props = [ordered]@{}
    $networkname = (Get-ChildItem Configs/$network).Basename
    Copy-Item Configs/$network Network.tla
    Write-Host "---------- $networkname ----------"
    foreach($prop in (Get-Content "$model.userprops")){
        $result = [ordered]@{} 
        $log = "$model.$networkname.$prop.log"
        Copy-Item $basecfg "$model.cfg"
        $prop >> "$model.cfg"
        if (Test-Path "$model.constraint") { 
            Get-Content "$model.constraint" >> "$model.cfg"; 
        }
        & $runtlc $model $workers > $log
        Remove-Item states -Recurse -Force
        if (Select-String -Quiet "Error: Assumption.*is false" -Path $log) {
            Write-Host "  ! PANIC: bad model (assume failed)"
        }
        else {
            if (Select-String -Quiet "No error has been found" -Path $log) {
                Write-Host "[X] $prop"
                $result.Add("value", $true)
            }
            else {
                Write-Host "[ ] $prop"
                Write-Host "log file is in $log and counter example is in $model.$networkname.$prop.html"
                fbpmn log2html "$model.$networkname.$prop" "$model.$networkname.$prop" | Out-Null
                $result.Add("value", $false)
            }
            $stat1 = Select-String "^[0-9]* states generated.*0 states left on queue" -Path $log
            $stat2 = Select-String "The depth of the complete state graph" -Path $log
            $stat3 = Select-String "^Finished in ([0-9]*min )?[0-9]*s at" $log
            & $parse_stat "$stat1" "$stat2" "$stat3" $result 
        }
        $props.Add("$prop", $result)
    }
    $comms.Add("$networkname", $props) 
}
$modele.Add("$model", $comms)
$modele | ConvertTo-Json -Depth 5 | Out-File "$model.json" 

